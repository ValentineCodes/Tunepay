{"componentChunkName":"component---src-templates-post-template-js","path":"/guides/accept_payments_on_your_react_app/","result":{"data":{"mdx":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Guides - Accept Payments on your React App\",\n  \"date\": \"2020-06-03T00:00:00.000Z\",\n  \"published\": true\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar Callout = makeShortcode(\"Callout\");\nvar OrderedList = makeShortcode(\"OrderedList\");\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"header\", null, mdx(\"h1\", null, \"Accept Payments on your React App\"), mdx(Callout, {\n    type: \"summary\",\n    title: \"In a nutshell\",\n    mdxType: \"Callout\"\n  }, \"Need to start accepting payments through your React app? In this article, we'll be exploring how to connect Paystack with your React app. We'll be using a sample checkout page on an e-commerce store for our demo\")), mdx(\"h2\", {\n    \"id\": \"introduction\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"href\": \"#introduction\",\n    \"aria-label\": \"introduction permalink\",\n    \"className\": \"anchor before\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"Introduction\"), mdx(Callout, {\n    type: \"info\",\n    title: \"Before you begin\",\n    mdxType: \"Callout\"\n  }, \"You should \", mdx(\"a\", {\n    href: \"https://dashboard.paystack.com/#/signup\",\n    target: \"_blank\",\n    rel: \"noopener noreferrer\"\n  }, \"create a free Paystack account\"), \". We'll provide you with test keys that you can use to make test your integration.\"), mdx(\"p\", null, \"We're going to use our public keys for this demo. To get your public key, login into your Paystack dashboard and click on the \", mdx(\"a\", {\n    href: \"https://dashboard.paystack.com/#/settings/developer\",\n    target: \"_blank\",\n    rel: \"noopener noreferrer\"\n  }, \"Settings tab\"), \", and then click on API Keys & Webhooks.\"), mdx(\"p\", null, \"You'll notice you have two public keys: Test and Live. While building your app, it's a good idea to use your test keys, as this will allow you to simulate transactions. Once your app is production-ready, you can switch over to your live keys.\"), mdx(Callout, {\n    type: \"danger\",\n    title: \"Never use secret keys on client-side\",\n    mdxType: \"Callout\"\n  }, \"Since this is a client-side integration, it means that our API keys will be exposed. To prevent anyone gaining access to our Paystack account, we want to make sure we're using our \", mdx(\"strong\", null, \"public keys\"), \". Secret keys should only ever be used on the server.\"), mdx(\"h2\", {\n    \"id\": \"project-setup\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"href\": \"#project-setup\",\n    \"aria-label\": \"project setup permalink\",\n    \"className\": \"anchor before\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"Project Setup\"), mdx(\"p\", null, \"So, let's get to coding! To start off, I'm going to create a new react app. I like to use \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"yarn\"), \" to get started with my react apps, but you're welcome to use \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"npm\"), \" or \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"npx\"), \".\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"yarn create react-app react-paystack-checkout\\n\")), mdx(\"p\", null, \"Once our app is created, we'll need to navigate into our app's directory and start our app:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"cd react-paystack-checkout\\nyarn start\\n\")), mdx(\"p\", null, \"Let's take a moment and add the UI for our checkout page.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"<div className=\\\"App\\\">\\n  <div className=\\\"container\\\">\\n    <div className=\\\"item\\\">\\n      <div className=\\\"overlay-effect\\\"></div>\\n      <img\\n        className=\\\"item-image\\\"\\n        src=\\\"https://images.unsplash.com/photo-1526947425960-945c6e72858f?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=2850&q=80\\\"\\n        alt=\\\"product\\\"\\n      />\\n      <div className=\\\"item-details\\\">\\n        <p className=\\\"item-details__title\\\">Coconut Oil</p>\\n        <p className=\\\"item-details__amount\\\">NGN{amount / 100}</p>\\n      </div>\\n    </div>\\n    <div className=\\\"checkout\\\">\\n      <div className=\\\"checkout-form\\\">\\n        <div className=\\\"checkout-field\\\">\\n          <label>Name</label>\\n          <input/>\\n        </div>\\n        <div className=\\\"checkout-field\\\">\\n          <label>Email</label>\\n          <input/>\\n        </div>\\n        <div className=\\\"checkout-field\\\">\\n          <label>Phone</label>\\n          <input/>\\n        </div>\\n      </div>\\n    </div>\\n  </div>\\n</div>\\n\")), mdx(\"p\", null, \"Now you should be able to see our beautiful product display in your browser! For the product we're selling, I just grabbed \", mdx(\"a\", {\n    href: \"https://unsplash.com/photos/6LBBOwkPzyQ\",\n    target: \"_blank\",\n    rel: \"noopener noreferrer\"\n  }, \"this cool image\"), \" of a bottle of Coconut oil from Unsplash. I've also hardcoded a product name, and set up our amount to be pulled in later.\"), mdx(\"p\", null, \"Wondering why we're dividing our amount by 100? When calling the Paystack API, you'll want to pass the amount in the smallest currency denomination available. We're selling our product for \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"NGN 10,000\"), \", which is \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"1,000,000 kobo\"), \". We don't want to show our customers prices in kobo though, so we divide by 100 to get the Naira equivalent.\"), mdx(\"h2\", {\n    \"id\": \"install-paystack\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"href\": \"#install-paystack\",\n    \"aria-label\": \"install paystack permalink\",\n    \"className\": \"anchor before\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"Install Paystack\"), mdx(\"p\", null, \" But our form isn't functional yet. We need to add some logic that will submit our customer's data and initialize a transaction on Paystack. Let's install the \", mdx(\"a\", {\n    href: \"https://github.com/iamraphson/react-paystack\",\n    target: \"_blank\",\n    rel: \"noopener noreferrer\"\n  }, \"react-paystack\"), \" library:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \" yarn add react-paystack\\n\")), mdx(\"p\", null, \" Once the library installs successfully, we can some some variables to hold state and a function to handle the state changes. I'll explain the variables we're passing and what they're for in a little bit. For now we'll just add them and hardcode our publicKey and product amount, since they won't be changing.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"const publicKey = \\\"pk_your_public_key_here\\\"\\n  const amount = 1000000 // Remember, set in kobo!\\n  const [email, setEmail] = useState(\\\"\\\")\\n  const [name, setName] = useState(\\\"\\\")\\n  const [phone, setPhone] = useState(\\\"\\\")\\n\\n...\\n\\n<div className=\\\"checkout-form\\\">\\n  <div className=\\\"checkout-field\\\">\\n    <label>Name</label>\\n    <input\\n      type=\\\"text\\\"\\n      id=\\\"name\\\"\\n      onChange={(e) => setName(e.target.value)}\\n    />\\n  </div>\\n  <div className=\\\"checkout-field\\\">\\n    <label>Email</label>\\n    <input\\n      type=\\\"text\\\"\\n      id=\\\"email\\\"\\n      onChange={(e) => setEmail(e.target.value)}\\n    />\\n  </div>\\n  <div className=\\\"checkout-field\\\">\\n    <label>Phone</label>\\n    <input\\n      type=\\\"text\\\"\\n      id=\\\"phone\\\"\\n      onChange={(e) => setPhone(e.target.value)}\\n    />\\n  </div>\\n  <PaystackButton className=\\\"paystack-button\\\" {...componentProps} />\\n</div>\\n\")), mdx(\"h2\", {\n    \"id\": \"accept-payments\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"href\": \"#accept-payments\",\n    \"aria-label\": \"accept payments permalink\",\n    \"className\": \"anchor before\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"Accept Payments\"), mdx(\"p\", null, \"The last thing we'll need to do here is submit the form to Paystack, so we can initialize a transaction. There are three different ways we can use the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"react-paystack\"), \" library in our app:\"), mdx(OrderedList, {\n    items: [mdx(\"span\", null, mdx(\"strong\", null, \"PaystackButton\"), \" - The original library implementation\"), mdx(\"span\", null, mdx(\"strong\", null, \"usePaystackPayment\"), \" - An implementation of the library using React Hooks\"), mdx(\"span\", null, mdx(\"strong\", null, \"PaystackConsumer\"), \" - An implementation of the library using React's Context API\")],\n    mdxType: \"OrderedList\"\n  }), mdx(\"p\", null, \"Let's use the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"PaystackButton\"), \" implementation for our app:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"import { PaystackButton } from 'react-paystack'\\n\")), mdx(\"p\", null, \"There are a few parameters we can pass to the button, but the required ones are:\"), mdx(OrderedList, {\n    items: [mdx(\"span\", null, mdx(\"strong\", null, \"email\"), \" - All transactions on Paystack require a customer's email address\"), mdx(\"span\", null, mdx(\"strong\", null, \"amount\"), \" - The amount we're charging the customer\"), mdx(\"span\", null, mdx(\"strong\", null, \"publicKey\"), \" - Remember, public keys for client-side code always\"), mdx(\"span\", null, mdx(\"strong\", null, \"text\"), \" - The text you want displayed on your button\"), mdx(\"span\", null, mdx(\"strong\", null, \"onSuccess\"), \" - A function that will run after a successful transaction is completed\"), mdx(\"span\", null, mdx(\"strong\", null, \"onClose\"), \" - A function that will run when the customer closes the Paystack Checkout\")],\n    mdxType: \"OrderedList\"\n  }), mdx(\"p\", null, \"Optionally, we can pass a transaction reference and a metadata object. If you don't pass a reference, Paystack will just generate one for you. If you choose to generate your own references, you'll need to make sure that \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"every reference is unique.\"), \" The metadata object lets you store any additional information you would like to for a transaction. Here, we'll be passing the customer's name and phone number in our metadata. We'll put all of this in a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"componentProps\"), \" object that we'll pass to the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"PaystackButton\"), \" component.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"const componentProps = {\\n    email,\\n    amount,\\n    metadata: {\\n      name,\\n      phone,\\n    },\\n    publicKey,\\n    text: \\\"Pay Now\\\",\\n    onSuccess: () =>\\n      alert(\\\"Thanks for doing business with us! Come back soon!!\\\"),\\n    onClose: () => alert(\\\"Wait! You need this oil, don't go!!!!\\\"),\\n  }\\n\")), mdx(\"p\", null, \"Our \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"App.js\"), \" file should now look like this\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"import React, { useState } from \\\"react\\\"\\nimport { PaystackButton } from \\\"react-paystack\\\"\\nimport \\\"./App.css\\\"\\n\\nconst App = () => {\\n  const publicKey = \\\"pk_your_public_key_here\\\"\\n  const amount = 1000000\\n  const [email, setEmail] = useState(\\\"\\\")\\n  const [name, setName] = useState(\\\"\\\")\\n  const [phone, setPhone] = useState(\\\"\\\")\\n\\n  const componentProps = {\\n    email,\\n    amount,\\n    metadata: {\\n      name,\\n      phone,\\n    },\\n    publicKey,\\n    text: \\\"Pay Now\\\",\\n    onSuccess: () =>\\n      alert(\\\"Thanks for doing business with us! Come back soon!!\\\"),\\n    onClose: () => alert(\\\"Wait! Don't leave :(\\\"),\\n  }\\n\\n  return (\\n    <div className=\\\"App\\\">\\n      <div className=\\\"container\\\">\\n        <div className=\\\"item\\\">\\n          <img />\\n          <div className=\\\"item-details\\\">\\n            <p>Dancing Shoes</p>\\n            <p>{amount}</p>\\n          </div>\\n        </div>\\n        <div className=\\\"checkout-form\\\">\\n          <form>\\n            <label>Name</label>\\n            <input\\n              type=\\\"text\\\"\\n              id=\\\"name\\\"\\n              onChange={(e) => setName(e.target.value)}\\n            />\\n            <label>Email</label>\\n            <input\\n              type=\\\"text\\\"\\n              id=\\\"email\\\"\\n              onChange={(e) => setEmail(e.target.value)}\\n            />\\n            <label>Phone</label>\\n            <input\\n              type=\\\"text\\\"\\n              id=\\\"phone\\\"\\n              onChange={(e) => setPhone(e.target.value)}\\n            />\\n          </form>\\n          <PaystackButton {...componentProps} />\\n        </div>\\n      </div>\\n    </div>\\n  )\\n}\\n\\nexport default App\\n\")), mdx(\"p\", null, \"We can switch back over to the browser now and test our app out! But before we do that, let's add some styles so people will actually want to buy our coconut oil.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"@import url(\\\"https://fonts.googleapis.com/css2?family=Roboto:ital,wght@0,400;1,300&display=swap\\\");\\n\\n.App {\\n  text-align: center;\\n  font-family: \\\"Roboto\\\";\\n  letter-spacing: 0.1rem;\\n}\\n\\n.container {\\n  display: flex;\\n  flex-direction: row;\\n  margin: 5% auto;\\n  width: 635px;\\n  height: 430px;\\n  background: white;\\n  box-shadow: 0px 0px 50px rgba(0, 0, 0, 0.5);\\n}\\n\\n.item {\\n  width: 50%;\\n  position: relative;\\n}\\n\\n.item-image {\\n  height: 430px;\\n  width: 100%;\\n  object-fit: cover;\\n}\\n\\n.overlay-effect {\\n  position: absolute;\\n  top: 0;\\n  bottom: 0;\\n  left: 0;\\n  right: 0;\\n  opacity: 0.2;\\n  background-color: #303030;\\n  overflow: hidden;\\n  z-index: 1;\\n}\\n\\n.item-details {\\n  position: absolute;\\n  bottom: 0;\\n  margin-bottom: 5px;\\n  margin-left: 20px;\\n  color: #84a17d;\\n  text-align: left;\\n}\\n\\n.item-details__title {\\n  font-size: 22px;\\n}\\n\\n.item-details__amount {\\n  font-weight: bolder;\\n}\\n\\n.checkout {\\n  background: #84a17d; /* fallback for old browsers */\\n\\n  display: flex;\\n  flex-direction: column;\\n  justify-content: center;\\n  height: 430px;\\n  width: 50%;\\n}\\n\\n.checkout-form {\\n  padding: 20px 20px;\\n}\\n\\n.checkout-field {\\n  display: flex;\\n  flex-direction: column;\\n  margin-bottom: 20px;\\n}\\n\\n.checkout-field label {\\n  text-align: left;\\n  color: #e0eafc;\\n  font-size: 10px;\\n  margin-bottom: 5px;\\n  text-transform: uppercase;\\n  letter-spacing: 0.1rem;\\n}\\n\\n.checkout-field input {\\n  background-color: transparent;\\n  border: 1px solid #cecece;\\n  border-radius: 5px;\\n  color: #e0eafc;\\n  height: 35px;\\n}\\n\\n.paystack-button {\\n  cursor: pointer;\\n  text-align: center;\\n  font-size: 10px;\\n  letter-spacing: 0.1rem;\\n  text-transform: uppercase;\\n  background-color: #bfbfbf;\\n  font-weight: bold;\\n  color: #e0eafc;\\n  border: none;\\n  border-radius: 5px;\\n  width: 100%;\\n  height: 45px;\\n  margin-top: 40px;\\n}\\n\")), mdx(\"p\", null, \"Switch over to your browser and you should see a much more appealing product display. Now we can make lots of money on our NGN 10,000 bottles of coconut oil \\uD83D\\uDE05\"), mdx(\"p\", null, \"The full code sample is in \", mdx(\"a\", {\n    href: \"https://github.com/PaystackOSS/sample-react\",\n    target: \"_blank\",\n    rel: \"noopener noreferrer\"\n  }, \"this repository\"), \" and you can check out the \", mdx(\"a\", {\n    href: \"https://react-paystack-guide.netlify.app/\",\n    target: \"_blank\",\n    rel: \"noopener noreferrer\"\n  }, \"live demo\"), \".\"));\n}\n;\nMDXContent.isMDXComponent = true;","tableOfContents":{"items":[{"url":"#introduction","title":"Introduction"},{"url":"#project-setup","title":"Project Setup"},{"url":"#install-paystack","title":"Install Paystack"},{"url":"#accept-payments","title":"Accept Payments"}]},"fields":{"slug":"/guides/accept_payments_on_your_react_app/"},"frontmatter":{"title":"Guides - Accept Payments on your React App"}}},"pageContext":{"slug":"/guides/accept_payments_on_your_react_app/"}},"staticQueryHashes":["2577489308"]}